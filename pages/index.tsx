import { useState, ChangeEvent } from 'react'
import Head from 'next/head'
import { useQuery } from "@apollo/client"

import { GET_ALL_CHARACTERS, FILTER_CHARACTER_BY_NAME } from "../queries"

import Search from "../components/Search"
import Header from "../components/Header"
import Loader from "../components/Loader";
import Pagination from "../components/Pagination"
import Card from "../components/Card";
import DataNotFound from "../components/DataNotFound";

import { Main, Content, CardSection } from '../styles/styles'

const Home = () => {
    const [character, setCharacter] = useState<string>("");
    const [pageAllCharacters, setPageAllCharacters] = useState<number>(1)
    const [pageByName, setPageByName] = useState<number>(1)
    const [pageCount, setPageCount] = useState<number>(1)

    const handleOnChange = (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {
        setCharacter(e.target.value)
    }

    const AllCharacters = () => {
        const { loading, error, data } = useQuery(GET_ALL_CHARACTERS, {
            variables: {page: pageAllCharacters},
        })

        data && setPageCount(data?.characters?.info?.pages)

        return (
            <>
                {loading && <Loader />}
                {error && <DataNotFound message="Character Not Found" />}
                <CardSection>
                    {data?.characters?.results.map((character:any) => (
                        <Card key={character.id} character={character} />
                    ))}
                </CardSection>
            </>
        )
    }

    const CharacterByName = () => {
        const { loading, error, data } = useQuery(FILTER_CHARACTER_BY_NAME, {
            variables: {
                page: pageByName,
                character: character
            },
        })

        data && setPageCount(data?.characters?.info?.pages)

        return (
            <>
                {loading && <Loader />}
                {error && <DataNotFound message="Character Not Found" />}
                <CardSection>
                    {data?.characters?.results.map((character:any) => (
                        <Card key={character.id} character={character} />
                    ))}
                </CardSection>
            </>
        )
    }

    return (
        <Main>
          <Head>
            <title>Rick and Morty</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
            <Header />
            <Search onChange={handleOnChange} />
            <Pagination
                pageCount={pageCount}
                setPage={character ? setPageByName : setPageAllCharacters}
                currentPage={character ? pageByName : pageAllCharacters}
            />
            <Content>
                {character ? <CharacterByName /> : <AllCharacters />}
            </Content>
        </Main>
    )
}

export default Home
